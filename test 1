###################################################################################################################################
                                            #Partie DODO
###################################################################################################################################


import tkinter as tk




####################################################
# PARTIE 1 : GESTION DE LA PAGE INSCRIPTION
####################################################





def ouvrir_fenetre_inscription():
    """
    Cette fonction est associé au bouton_incription 
    et permet l'ouverture de la page d'inscription quand l'utilisateur clic sur ce bouton
    """
    couleur_fond="pink"
    #permet de detruir les widgets de la page precedente
    for widget in fenetre.winfo_children():#A REGARDER
        widget.destroy()

    #creation du titre
    titre=tk.Label(fenetre,text="Page d'inscription",bg=couleur_fond,fg="black",font=("Arial",90))
    titre.pack(side="top") 
    #changement du fond
    fenetre.configure(bg=couleur_fond)

    #creation du champs d'entree
    champs_pseudo=tk.Entry(fenetre)
    champs_pseudo.pack()
    champs_mdp=tk.Entry(fenetre)
    champs_mdp.pack()

    #bouton valider
    def enregistre():
        pseudo_joueur=champs_pseudo.get()
        mdp_joueur=champs_mdp.get()
        profil_joueur=[pseudo_joueur,mdp_joueur]
        """
        Cette fonction recupere le pseudo et le mot de passe du joueur (2str),
        pour ensuite l'ajouter dans la base de données
        """
        joueur=profil_joueur
        with open('profils.txt','r',encoding='utf-8') as fichier:
            utilisateurs=fichier.read().split()
            profil_joueur=";".join(profil_joueur)
            with open('profils.txt','a',encoding='utf-8') as fichier:
                fichier.write('\n'+profil_joueur)
                fichier.close()
                print(joueur)
        for widget in fenetre.winfo_children():#A REGARDER
            widget.destroy()
        titre=tk.Label(fenetre,text="Page d'inscription",bg=couleur_fond,fg="black",font=("Arial",90))
        titre.pack(side="top")
        titre2=tk.Label(fenetre,text="Félicitation ! Vous êtes bien inscrit",bg=couleur_fond,fg="black",font=("Arial",50))
        titre2.pack()  
        bouton_jouer=tk.Button(fenetre,text="Lancer le jeu !",font=("Arial",15),bg="#141769",fg="white")
        bouton_jouer.pack()


    bouton_valider=tk.Button(fenetre,text="Valider",font=("Arial",15),bg="#141769",fg="white",command=enregistre)
    bouton_valider.pack()

    







####################################################
# PARTIE 2 : GESTION DE LA PAGE CONNEXION
####################################################






def ouvrir_fenetre_connexion():
    """
    Cette fonction est associé au bouton_incription 
    et permet l'ouverture de la page de connexion quand l'utilisateur clic sur ce bouton
    """
    couleur_fond="pink"
    #permet de detruir les widgets de la page precedente
    for widget in fenetre.winfo_children():#A REGARDER
        widget.destroy()

    #creation du titre
    titre=tk.Label(fenetre,text="Page de connexion",bg=couleur_fond,fg="black",font=("Arial",90))
    titre.pack(side="top") 
    #changement du fond
    fenetre.configure(bg=couleur_fond)

    #creation du champs d'entree
    champs_pseudo=tk.Entry(fenetre)
    champs_pseudo.pack()
    champs_mdp=tk.Entry(fenetre)
    champs_mdp.pack()

    #bouton valider
    def verification():
        pseudo_joueur=champs_pseudo.get()
        mdp_joueur=champs_mdp.get()
        with open('profils.txt','r',encoding='utf-8') as fichier:
            utilisateurs=fichier.read().split()
            for elem in utilisateurs:
                if str(pseudo_joueur+";"+mdp_joueur) == elem:
                    print('le profil est dans la base de données')
                    for widget in fenetre.winfo_children():#A REGARDER
                        widget.destroy()
                    titre=tk.Label(fenetre,text="Page de connexion",bg=couleur_fond,fg="black",font=("Arial",90))
                    titre.pack(side="top")
                    titre2=tk.Label(fenetre,text="Félicitation ! Vous êtes bien connecté",bg=couleur_fond,fg="black",font=("Arial",50))
                    titre2.pack()  
                    bouton_jouer=tk.Button(fenetre,text="Lancer le jeu !",font=("Arial",15),bg="#141769",fg="white")
                    bouton_jouer.pack()
                    return True
            titre3=tk.Label(fenetre,text="Votre compte n'existe pas\nRéessayer ou inscrivez-vous",bg=couleur_fond,fg="black",font=("Arial",50))
            titre3.pack()


    bouton_valider=tk.Button(fenetre,text="Valider",font=("Arial",15),bg="#141769",fg="white",command=verification)
    bouton_valider.pack()

    











####################################################
# PARTIE 3 : GESTION DE LA PAGE D'ACCEUIL
####################################################


fenetre = tk.Tk()
fenetre.state("zoomed")#permet d'ouvrire la page directement en grand ecran
fenetre.title("Page d'acceuil")
couleur_fond="#141769"
couleur_boutons="white"
fenetre.configure(bg=couleur_fond)


#céation titre de la page
titre_page=tk.Label(fenetre,text="Bienvenue sur le\nMastermind !",bg=couleur_fond,fg="white",font=("Arial",90))
titre_page.pack(side="top") #sa place dans la fenetre



#creation des boutons

cadre=tk.Frame(fenetre,bg=couleur_fond)#cadre où sont les 2 boutons (inscription et connexion)
cadre.pack(expand=True)


def fermer_fenetre():
    """
    Cette fonction est associé au bouton_fermeture 
    et permet la fermeture de la page quand l'utilisateur clic sur ce bouton
    """
    fenetre.destroy()#permet de fermer la fenetre
    return fenetre
    


bouton_inscription=tk.Button(cadre,text="Inscription",command=ouvrir_fenetre_inscription,font=("Arial",30),bg=couleur_boutons,fg=couleur_fond)
bouton_inscription.pack(side="left",padx=50)

bouton_connexion=tk.Button(cadre,text="Connexion",command=ouvrir_fenetre_connexion,font=("Arial",30),bg=couleur_boutons,fg=couleur_fond)
bouton_connexion.pack(side="left",padx=50)

bouton_fermeture=tk.Button(fenetre,text="Fermer la fenetre",command=fermer_fenetre,font=("Arial",15),bg=couleur_boutons,fg=couleur_fond)
bouton_fermeture.pack()






####TACHES A FAIRE
#boutton retour sur les page inscription et connexion
#boutton qui renvoie a la page d'inscription quand la connexion n'a pas reussi (si c'est possible)
#gerer l'aspect visuel

fenetre.mainloop()





####################################################################################################################################
                                            #Partie Alix G
###################################################################################################################################



#PARTIE UN LES TROIC PARTIES DE L'ECRAN:

import tkinter as tk

# Création de la fenêtre principale
fenetre = tk.Tk()
fenetre.title("mastermind")

fenetre.state("zoomed")  # Ouvre la fenêtre en plein écran, parce que sinon c'est pas la bonne taille a chaque fois

# Configuration des colonnes 
fenetre.grid_columnconfigure(0, weight=1, minsize=100)  # ici (nom de a colone 0 1 ou 2, weight c'est la taille 1=petit 5=grand, minsize= taille min )
fenetre.grid_columnconfigure(1, weight=8, minsize=300)  # grid_columnconfigure C'est une fonction de Tkinter qui permet de configurer les colonnes d'une grille (grid).
fenetre.grid_columnconfigure(2, weight=1, minsize=100)

# Configuration de la ligne
fenetre.grid_rowconfigure(0, weight=1, minsize=200) 
#ici on met 0 parce qu'il y a qu'une seule ligne, 1 parce qu'on a pas besoin qu'elle soit plus grande qu'une aure ligne

# Création des carrés collés les uns aux autres
canevas_gauche = tk.Canvas(fenetre, background="pink")
canevas_gauche.grid(row=0, column=0, rowspan=2,sticky="nsew" )  
#row=0 : place le widget dans la première ligne.
#column=0 : place le widget dans la première colonne.
#rowspan=2 : fait occuper au widget deux lignes.
#sticky="nsew" : fait en sorte que le rectangle s'étende dans toutes les directions.

canevas_central = tk.Canvas(fenetre, background="purple")
canevas_central.grid(row=0, column=1,rowspan=2, sticky="nsew")

canevas_droit = tk.Canvas(fenetre, background="pink")
canevas_droit.grid(row=0, column=2, rowspan=2, sticky="nsew") 

fenetre.mainloop()








#PARTIE DEUX, LES COULEURS:

from tkinter import *

fenetre = Tk()

# je vais creer un canevas
canvas = Canvas(fenetre, width=400, height=200, bg="white") #bg c'est l'ariere plan
canvas.pack()

couleurs = ["green", "blue", "pink", "yellow", "orange", "grey", "white"]
ronds = [] # la en gros je cree une liste pour stocker les ronds

for i in range(4):  # je prends 4 parce qu'il y a 4 rond au mastermind
    rond = canvas.create_oval(50 + i * 100, 75, 100 + i * 100, 125, fill="white")
    ronds.append(rond)

index_rond = 0

# Création d'un cadre pour les boutons
cadre1 = Frame(fenetre)
cadre1.pack()

def colorer_rond(couleur):
    global index_rond
    if index_rond < len(ronds):
        canvas.itemconfig(ronds[index_rond], fill=couleur)
        index_rond += 1


# Ajout de boutons correspondant aux couleurs
for couleur in couleurs:
    bouton = Button(cadre1, text=couleur, bg=couleur, command=lambda c=couleur: colorer_rond(c))
    bouton.pack(side=LEFT)

fenetre.mainloop()

###################################################################################################################################
                                            #Partie Alix R
###################################################################################################################################







###################################################################################################################################
                                            #Partie Adam J
###################################################################################################################################

import tkinter as tk

# Création de la fenêtre principale
fenetre = tk.Tk()
fenetre.title("mastermind")
fenetre.state("zoomed")

# Configuration des colonnes 
fenetre.grid_columnconfigure(0, weight=1, minsize=100)
fenetre.grid_columnconfigure(1, weight=8, minsize=300)
fenetre.grid_columnconfigure(2, weight=1, minsize=100)

# Configuration de la ligne
fenetre.grid_rowconfigure(0, weight=1, minsize=200)

# Création des Canvas
canvas_gauche = tk.Canvas(fenetre, background="black")
canvas_gauche.grid(row=0, column=0, rowspan=2, sticky="nsew")

canvas_central = tk.Canvas(fenetre, background="purple")
canvas_central.grid(row=0, column=1, rowspan=2, sticky="nsew")

canvas_droit = tk.Canvas(fenetre, background="black")
canvas_droit.grid(row=0, column=2, rowspan=2, sticky="nsew")

# Dimensions du canvas central
canvas_largeur = 1000  # Largeur totale
canvas_hauteur = 700   # Hauteur totale
canvas_central.config(width=canvas_largeur, height=canvas_hauteur)

# Calcul des tailles de la grille
ligne_hauteur = canvas_hauteur / 11
colonne_largeur = canvas_largeur / 10

# Dessin des rectangles et des cercles
for i in range(11):
    # Coordonnées du rectangle (occupant 80% à droite)
    rect_x1 = colonne_largeur * 2
    rect_x2 = colonne_largeur * 10
    rect_y1 = i * ligne_hauteur + 10
    rect_y2 = (i + 1) * ligne_hauteur - 10

    # Dessine le rectangle
    canvas_central.create_rectangle(rect_x1, rect_y1, rect_x2, rect_y2, outline="black")

    # Dessine les 4 cercles alignés sur la gauche du rectangle
    for j in range(4):
        circle_x1 = colonne_largeur * 2.2 + j * colonne_largeur
        circle_x2 = circle_x1 + 30
        circle_y1 = rect_y1 + 5
        circle_y2 = rect_y1 + 35
        canvas_central.create_oval(circle_x1, circle_y1, circle_x2, circle_y2, outline="black")

# Affichage de la fenêtre
fenetre.mainloop()

